// This query looks for Risky sign in attempt made from first seen IPAddress in 30d after user clicked Url.
let searchTimeRange = 14d;
let msftFirstPartyApp= externaldata(AppId:string, AppDisplayName:string)
[
  h@"https://raw.githubusercontent.com/hchiphong/KQL/main/MicrosoftFirstPartyApp.csv"
]
with(format="csv");
let data =
union
( SigninLogs
// Exlucde Corp Device
| where AppDisplayName in (( msftFirstPartyApp | distinct AppDisplayName)) // App in microsoft first party app
| where UserPrincipalName has "@" //ignore uid
| extend deviceId = tostring(DeviceDetail.deviceId), displayName = tostring(DeviceDetail.displayName)
| where isempty(deviceId)
| where RiskEventTypes !='[]' or RiskEventTypes_V2 !='[]' // Risky sign in only, this can be commented but result more FP
| extend Risks= array_concat(todynamic(RiskEventTypes),todynamic(RiskEventTypes_V2))
| project TimeGenerated, CreatedDateTime, Type, AccountUpn= tolower(UserPrincipalName), IPAddress,AppDisplayName, ResourceDisplayName ,RiskLevel,Risks,TenantId,CorrelationId, ResultType,ResultDescription 
)
,(
UrlClickEvents
| project TimeGenerated, Timestamp,Type,AccountUpn=tolower( AccountUpn), IPAddress,Url
)
| where ingestion_time() >= ago(searchTimeRange)
| partition hint.strategy=native by AccountUpn
    (
    sort by TimeGenerated asc
    | scan with_match_id=id  declare(ClickTime:datetime, LoginTime:datetime,Url:string,ClickIP:string) with
    (
        step UrlClick output=none: Type=="UrlClickEvents" => ClickTime = Timestamp ;
        step Login : Type=="SigninLogs"  and  CreatedDateTime- UrlClick.ClickTime between (5s .. 300s ) 
                        and (not( ipv4_is_in_range(IPAddress,format_ipv4_mask(UrlClick.IPAddress,24))) or IPAddress has ":" or UrlClick.IPAddress has ":") //subnet of click IP different from signin IP, which can be adjusted
                        => LoginTime= CreatedDateTime, ClickTime=UrlClick.ClickTime, Url=UrlClick.Url,ClickIP=UrlClick.IPAddress ;
    )
    | project LoginTime, AccountUpn, ClickTime,  LoginIPAddress= IPAddress,AppDisplayName, ResourceDisplayName, LoginResult=strcat(ResultType,"-",ResultDescription), EventGroupNumber=id,RiskLevel,Risks,Url,ClickIP, CorrelationId, TenantId
    | sort by LoginTime,AccountUpn,EventGroupNumber desc  // EventGroupNumber means how many grouped series events the user has
);
data
//Exclude previous known signin IP
| join kind=anti  ( SigninLogs 
| where TimeGenerated between (ago(searchTimeRange+30d) .. ago(searchTimeRange))
| where UserPrincipalName in (( data | distinct AccountUpn))
| distinct IPAddress, UserPrincipalName
 ) on $left.AccountUpn == $right.UserPrincipalName, $left.LoginIPAddress==$right.IPAddress
